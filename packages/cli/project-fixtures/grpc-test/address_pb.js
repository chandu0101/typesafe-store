// source: address.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var f1_f1types_pb = require('./f1/f1types_pb.js');
goog.object.extend(proto, f1_f1types_pb);
goog.exportSymbol('proto.tutorial.AddressBook', null, global);
goog.exportSymbol('proto.tutorial.HelloReply', null, global);
goog.exportSymbol('proto.tutorial.HelloRequest', null, global);
goog.exportSymbol('proto.tutorial.Person', null, global);
goog.exportSymbol('proto.tutorial.Person.PhoneNumber', null, global);
goog.exportSymbol('proto.tutorial.Person.PhoneNumber.PhoneNumber2', null, global);
goog.exportSymbol('proto.tutorial.Person.PhoneType', null, global);
goog.exportSymbol('proto.tutorial.Person.SampleMessage', null, global);
goog.exportSymbol('proto.tutorial.Person.SampleMessage.TestOneofCase', null, global);
goog.exportSymbol('proto.tutorial.PhoneType2', null, global);
goog.exportSymbol('proto.tutorial.RepeatHelloRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tutorial.Person = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tutorial.Person.repeatedFields_, null);
};
goog.inherits(proto.tutorial.Person, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tutorial.Person.displayName = 'proto.tutorial.Person';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tutorial.Person.PhoneNumber = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tutorial.Person.PhoneNumber, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tutorial.Person.PhoneNumber.displayName = 'proto.tutorial.Person.PhoneNumber';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tutorial.Person.PhoneNumber.PhoneNumber2 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tutorial.Person.PhoneNumber.PhoneNumber2, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tutorial.Person.PhoneNumber.PhoneNumber2.displayName = 'proto.tutorial.Person.PhoneNumber.PhoneNumber2';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tutorial.Person.SampleMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.tutorial.Person.SampleMessage.oneofGroups_);
};
goog.inherits(proto.tutorial.Person.SampleMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tutorial.Person.SampleMessage.displayName = 'proto.tutorial.Person.SampleMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tutorial.AddressBook = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tutorial.AddressBook.repeatedFields_, null);
};
goog.inherits(proto.tutorial.AddressBook, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tutorial.AddressBook.displayName = 'proto.tutorial.AddressBook';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tutorial.HelloRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tutorial.HelloRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tutorial.HelloRequest.displayName = 'proto.tutorial.HelloRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tutorial.RepeatHelloRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tutorial.RepeatHelloRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tutorial.RepeatHelloRequest.displayName = 'proto.tutorial.RepeatHelloRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tutorial.HelloReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tutorial.HelloReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tutorial.HelloReply.displayName = 'proto.tutorial.HelloReply';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tutorial.Person.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tutorial.Person.prototype.toObject = function(opt_includeInstance) {
  return proto.tutorial.Person.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tutorial.Person} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.Person.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    email: jspb.Message.getFieldWithDefault(msg, 3, ""),
    bf: msg.getBf_asB64(),
    projectsMap: (f = msg.getProjectsMap()) ? f.toObject(includeInstance, undefined) : [],
    helloenum: jspb.Message.getFieldWithDefault(msg, 8, 0),
    ipc: (f = msg.getIpc()) && f1_f1_c_f1ctypes_pb.F1CM.toObject(includeInstance, f),
    mapenumMap: (f = msg.getMapenumMap()) ? f.toObject(includeInstance, undefined) : [],
    phonesList: jspb.Message.toObjectList(msg.getPhonesList(),
    proto.tutorial.Person.PhoneNumber.toObject, includeInstance),
    lastUpdated: (f = msg.getLastUpdated()) && f1_f1types_pb.Hello.toObject(includeInstance, f),
    mapmessageMap: (f = msg.getMapmessageMap()) ? f.toObject(includeInstance, proto.tutorial.Person.PhoneNumber.toObject) : [],
    maponeofmessageMap: (f = msg.getMaponeofmessageMap()) ? f.toObject(includeInstance, proto.tutorial.Person.SampleMessage.toObject) : [],
    oneofmessagefield: (f = msg.getOneofmessagefield()) && proto.tutorial.Person.SampleMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tutorial.Person}
 */
proto.tutorial.Person.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tutorial.Person;
  return proto.tutorial.Person.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tutorial.Person} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tutorial.Person}
 */
proto.tutorial.Person.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBf(value);
      break;
    case 7:
      var value = msg.getProjectsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 8:
      var value = /** @type {!proto.f1.HelloEnum} */ (reader.readEnum());
      msg.setHelloenum(value);
      break;
    case 9:
      var value = new f1_f1_c_f1ctypes_pb.F1CM;
      reader.readMessage(value,f1_f1_c_f1ctypes_pb.F1CM.deserializeBinaryFromReader);
      msg.setIpc(value);
      break;
    case 10:
      var value = msg.getMapenumMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readEnum, null, "", 0);
         });
      break;
    case 4:
      var value = new proto.tutorial.Person.PhoneNumber;
      reader.readMessage(value,proto.tutorial.Person.PhoneNumber.deserializeBinaryFromReader);
      msg.addPhones(value);
      break;
    case 5:
      var value = new f1_f1types_pb.Hello;
      reader.readMessage(value,f1_f1types_pb.Hello.deserializeBinaryFromReader);
      msg.setLastUpdated(value);
      break;
    case 11:
      var value = msg.getMapmessageMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.tutorial.Person.PhoneNumber.deserializeBinaryFromReader, "", new proto.tutorial.Person.PhoneNumber());
         });
      break;
    case 12:
      var value = msg.getMaponeofmessageMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.tutorial.Person.SampleMessage.deserializeBinaryFromReader, "", new proto.tutorial.Person.SampleMessage());
         });
      break;
    case 13:
      var value = new proto.tutorial.Person.SampleMessage;
      reader.readMessage(value,proto.tutorial.Person.SampleMessage.deserializeBinaryFromReader);
      msg.setOneofmessagefield(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tutorial.Person.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tutorial.Person.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tutorial.Person} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.Person.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBf_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getProjectsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getHelloenum();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getIpc();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      f1_f1_c_f1ctypes_pb.F1CM.serializeBinaryToWriter
    );
  }
  f = message.getMapenumMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(10, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeEnum);
  }
  f = message.getPhonesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.tutorial.Person.PhoneNumber.serializeBinaryToWriter
    );
  }
  f = message.getLastUpdated();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      f1_f1types_pb.Hello.serializeBinaryToWriter
    );
  }
  f = message.getMapmessageMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(11, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.tutorial.Person.PhoneNumber.serializeBinaryToWriter);
  }
  f = message.getMaponeofmessageMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(12, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.tutorial.Person.SampleMessage.serializeBinaryToWriter);
  }
  f = message.getOneofmessagefield();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.tutorial.Person.SampleMessage.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.tutorial.Person.PhoneType = {
  MOBILE: 0,
  HOME: 1,
  WORK: 2
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tutorial.Person.PhoneNumber.prototype.toObject = function(opt_includeInstance) {
  return proto.tutorial.Person.PhoneNumber.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tutorial.Person.PhoneNumber} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.Person.PhoneNumber.toObject = function(includeInstance, msg) {
  var f, obj = {
    number: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    number2: (f = msg.getNumber2()) && proto.tutorial.Person.PhoneNumber.PhoneNumber2.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tutorial.Person.PhoneNumber}
 */
proto.tutorial.Person.PhoneNumber.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tutorial.Person.PhoneNumber;
  return proto.tutorial.Person.PhoneNumber.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tutorial.Person.PhoneNumber} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tutorial.Person.PhoneNumber}
 */
proto.tutorial.Person.PhoneNumber.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNumber(value);
      break;
    case 2:
      var value = /** @type {!proto.tutorial.Person.PhoneType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = new proto.tutorial.Person.PhoneNumber.PhoneNumber2;
      reader.readMessage(value,proto.tutorial.Person.PhoneNumber.PhoneNumber2.deserializeBinaryFromReader);
      msg.setNumber2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tutorial.Person.PhoneNumber.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tutorial.Person.PhoneNumber.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tutorial.Person.PhoneNumber} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.Person.PhoneNumber.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumber();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getNumber2();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.tutorial.Person.PhoneNumber.PhoneNumber2.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tutorial.Person.PhoneNumber.PhoneNumber2.prototype.toObject = function(opt_includeInstance) {
  return proto.tutorial.Person.PhoneNumber.PhoneNumber2.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tutorial.Person.PhoneNumber.PhoneNumber2} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.Person.PhoneNumber.PhoneNumber2.toObject = function(includeInstance, msg) {
  var f, obj = {
    number2: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tutorial.Person.PhoneNumber.PhoneNumber2}
 */
proto.tutorial.Person.PhoneNumber.PhoneNumber2.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tutorial.Person.PhoneNumber.PhoneNumber2;
  return proto.tutorial.Person.PhoneNumber.PhoneNumber2.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tutorial.Person.PhoneNumber.PhoneNumber2} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tutorial.Person.PhoneNumber.PhoneNumber2}
 */
proto.tutorial.Person.PhoneNumber.PhoneNumber2.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNumber2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tutorial.Person.PhoneNumber.PhoneNumber2.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tutorial.Person.PhoneNumber.PhoneNumber2.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tutorial.Person.PhoneNumber.PhoneNumber2} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.Person.PhoneNumber.PhoneNumber2.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumber2();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string number2 = 1;
 * @return {string}
 */
proto.tutorial.Person.PhoneNumber.PhoneNumber2.prototype.getNumber2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tutorial.Person.PhoneNumber.PhoneNumber2} returns this
 */
proto.tutorial.Person.PhoneNumber.PhoneNumber2.prototype.setNumber2 = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string number = 1;
 * @return {string}
 */
proto.tutorial.Person.PhoneNumber.prototype.getNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tutorial.Person.PhoneNumber} returns this
 */
proto.tutorial.Person.PhoneNumber.prototype.setNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional PhoneType type = 2;
 * @return {!proto.tutorial.Person.PhoneType}
 */
proto.tutorial.Person.PhoneNumber.prototype.getType = function() {
  return /** @type {!proto.tutorial.Person.PhoneType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.tutorial.Person.PhoneType} value
 * @return {!proto.tutorial.Person.PhoneNumber} returns this
 */
proto.tutorial.Person.PhoneNumber.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional PhoneNumber2 number2 = 3;
 * @return {?proto.tutorial.Person.PhoneNumber.PhoneNumber2}
 */
proto.tutorial.Person.PhoneNumber.prototype.getNumber2 = function() {
  return /** @type{?proto.tutorial.Person.PhoneNumber.PhoneNumber2} */ (
    jspb.Message.getWrapperField(this, proto.tutorial.Person.PhoneNumber.PhoneNumber2, 3));
};


/**
 * @param {?proto.tutorial.Person.PhoneNumber.PhoneNumber2|undefined} value
 * @return {!proto.tutorial.Person.PhoneNumber} returns this
*/
proto.tutorial.Person.PhoneNumber.prototype.setNumber2 = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tutorial.Person.PhoneNumber} returns this
 */
proto.tutorial.Person.PhoneNumber.prototype.clearNumber2 = function() {
  return this.setNumber2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tutorial.Person.PhoneNumber.prototype.hasNumber2 = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.tutorial.Person.SampleMessage.oneofGroups_ = [[4,9]];

/**
 * @enum {number}
 */
proto.tutorial.Person.SampleMessage.TestOneofCase = {
  TEST_ONEOF_NOT_SET: 0,
  NAME: 4,
  SUB_MESSAGE: 9
};

/**
 * @return {proto.tutorial.Person.SampleMessage.TestOneofCase}
 */
proto.tutorial.Person.SampleMessage.prototype.getTestOneofCase = function() {
  return /** @type {proto.tutorial.Person.SampleMessage.TestOneofCase} */(jspb.Message.computeOneofCase(this, proto.tutorial.Person.SampleMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tutorial.Person.SampleMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.tutorial.Person.SampleMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tutorial.Person.SampleMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.Person.SampleMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    subMessage: (f = msg.getSubMessage()) && proto.tutorial.Person.PhoneNumber.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tutorial.Person.SampleMessage}
 */
proto.tutorial.Person.SampleMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tutorial.Person.SampleMessage;
  return proto.tutorial.Person.SampleMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tutorial.Person.SampleMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tutorial.Person.SampleMessage}
 */
proto.tutorial.Person.SampleMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 9:
      var value = new proto.tutorial.Person.PhoneNumber;
      reader.readMessage(value,proto.tutorial.Person.PhoneNumber.deserializeBinaryFromReader);
      msg.setSubMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tutorial.Person.SampleMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tutorial.Person.SampleMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tutorial.Person.SampleMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.Person.SampleMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSubMessage();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.tutorial.Person.PhoneNumber.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.tutorial.Person.SampleMessage.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.tutorial.Person.SampleMessage} returns this
 */
proto.tutorial.Person.SampleMessage.prototype.setName = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.tutorial.Person.SampleMessage.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.tutorial.Person.SampleMessage} returns this
 */
proto.tutorial.Person.SampleMessage.prototype.clearName = function() {
  return jspb.Message.setOneofField(this, 4, proto.tutorial.Person.SampleMessage.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tutorial.Person.SampleMessage.prototype.hasName = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional PhoneNumber sub_message = 9;
 * @return {?proto.tutorial.Person.PhoneNumber}
 */
proto.tutorial.Person.SampleMessage.prototype.getSubMessage = function() {
  return /** @type{?proto.tutorial.Person.PhoneNumber} */ (
    jspb.Message.getWrapperField(this, proto.tutorial.Person.PhoneNumber, 9));
};


/**
 * @param {?proto.tutorial.Person.PhoneNumber|undefined} value
 * @return {!proto.tutorial.Person.SampleMessage} returns this
*/
proto.tutorial.Person.SampleMessage.prototype.setSubMessage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.tutorial.Person.SampleMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tutorial.Person.SampleMessage} returns this
 */
proto.tutorial.Person.SampleMessage.prototype.clearSubMessage = function() {
  return this.setSubMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tutorial.Person.SampleMessage.prototype.hasSubMessage = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.tutorial.Person.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tutorial.Person} returns this
 */
proto.tutorial.Person.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 id = 2;
 * @return {number}
 */
proto.tutorial.Person.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tutorial.Person} returns this
 */
proto.tutorial.Person.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string email = 3;
 * @return {string}
 */
proto.tutorial.Person.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.tutorial.Person} returns this
 */
proto.tutorial.Person.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bytes bf = 6;
 * @return {string}
 */
proto.tutorial.Person.prototype.getBf = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes bf = 6;
 * This is a type-conversion wrapper around `getBf()`
 * @return {string}
 */
proto.tutorial.Person.prototype.getBf_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBf()));
};


/**
 * optional bytes bf = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBf()`
 * @return {!Uint8Array}
 */
proto.tutorial.Person.prototype.getBf_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBf()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.tutorial.Person} returns this
 */
proto.tutorial.Person.prototype.setBf = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * map<string, string> projects = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.tutorial.Person.prototype.getProjectsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.tutorial.Person} returns this
 */
proto.tutorial.Person.prototype.clearProjectsMap = function() {
  this.getProjectsMap().clear();
  return this;};


/**
 * optional f1.HelloEnum helloEnum = 8;
 * @return {!proto.f1.HelloEnum}
 */
proto.tutorial.Person.prototype.getHelloenum = function() {
  return /** @type {!proto.f1.HelloEnum} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.f1.HelloEnum} value
 * @return {!proto.tutorial.Person} returns this
 */
proto.tutorial.Person.prototype.setHelloenum = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional f1.F1CM ipC = 9;
 * @return {?proto.f1.F1CM}
 */
proto.tutorial.Person.prototype.getIpc = function() {
  return /** @type{?proto.f1.F1CM} */ (
    jspb.Message.getWrapperField(this, f1_f1_c_f1ctypes_pb.F1CM, 9));
};


/**
 * @param {?proto.f1.F1CM|undefined} value
 * @return {!proto.tutorial.Person} returns this
*/
proto.tutorial.Person.prototype.setIpc = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tutorial.Person} returns this
 */
proto.tutorial.Person.prototype.clearIpc = function() {
  return this.setIpc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tutorial.Person.prototype.hasIpc = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * map<string, f1.HelloEnum> mapEnum = 10;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.f1.HelloEnum>}
 */
proto.tutorial.Person.prototype.getMapenumMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.f1.HelloEnum>} */ (
      jspb.Message.getMapField(this, 10, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.tutorial.Person} returns this
 */
proto.tutorial.Person.prototype.clearMapenumMap = function() {
  this.getMapenumMap().clear();
  return this;};


/**
 * repeated PhoneNumber phones = 4;
 * @return {!Array<!proto.tutorial.Person.PhoneNumber>}
 */
proto.tutorial.Person.prototype.getPhonesList = function() {
  return /** @type{!Array<!proto.tutorial.Person.PhoneNumber>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tutorial.Person.PhoneNumber, 4));
};


/**
 * @param {!Array<!proto.tutorial.Person.PhoneNumber>} value
 * @return {!proto.tutorial.Person} returns this
*/
proto.tutorial.Person.prototype.setPhonesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.tutorial.Person.PhoneNumber=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tutorial.Person.PhoneNumber}
 */
proto.tutorial.Person.prototype.addPhones = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.tutorial.Person.PhoneNumber, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tutorial.Person} returns this
 */
proto.tutorial.Person.prototype.clearPhonesList = function() {
  return this.setPhonesList([]);
};


/**
 * optional f1.Hello last_updated = 5;
 * @return {?proto.f1.Hello}
 */
proto.tutorial.Person.prototype.getLastUpdated = function() {
  return /** @type{?proto.f1.Hello} */ (
    jspb.Message.getWrapperField(this, f1_f1types_pb.Hello, 5));
};


/**
 * @param {?proto.f1.Hello|undefined} value
 * @return {!proto.tutorial.Person} returns this
*/
proto.tutorial.Person.prototype.setLastUpdated = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tutorial.Person} returns this
 */
proto.tutorial.Person.prototype.clearLastUpdated = function() {
  return this.setLastUpdated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tutorial.Person.prototype.hasLastUpdated = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * map<string, PhoneNumber> mapMessage = 11;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.tutorial.Person.PhoneNumber>}
 */
proto.tutorial.Person.prototype.getMapmessageMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.tutorial.Person.PhoneNumber>} */ (
      jspb.Message.getMapField(this, 11, opt_noLazyCreate,
      proto.tutorial.Person.PhoneNumber));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.tutorial.Person} returns this
 */
proto.tutorial.Person.prototype.clearMapmessageMap = function() {
  this.getMapmessageMap().clear();
  return this;};


/**
 * map<string, SampleMessage> mapOneOfMessage = 12;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.tutorial.Person.SampleMessage>}
 */
proto.tutorial.Person.prototype.getMaponeofmessageMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.tutorial.Person.SampleMessage>} */ (
      jspb.Message.getMapField(this, 12, opt_noLazyCreate,
      proto.tutorial.Person.SampleMessage));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.tutorial.Person} returns this
 */
proto.tutorial.Person.prototype.clearMaponeofmessageMap = function() {
  this.getMaponeofmessageMap().clear();
  return this;};


/**
 * optional SampleMessage oneofMessageField = 13;
 * @return {?proto.tutorial.Person.SampleMessage}
 */
proto.tutorial.Person.prototype.getOneofmessagefield = function() {
  return /** @type{?proto.tutorial.Person.SampleMessage} */ (
    jspb.Message.getWrapperField(this, proto.tutorial.Person.SampleMessage, 13));
};


/**
 * @param {?proto.tutorial.Person.SampleMessage|undefined} value
 * @return {!proto.tutorial.Person} returns this
*/
proto.tutorial.Person.prototype.setOneofmessagefield = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tutorial.Person} returns this
 */
proto.tutorial.Person.prototype.clearOneofmessagefield = function() {
  return this.setOneofmessagefield(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tutorial.Person.prototype.hasOneofmessagefield = function() {
  return jspb.Message.getField(this, 13) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tutorial.AddressBook.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tutorial.AddressBook.prototype.toObject = function(opt_includeInstance) {
  return proto.tutorial.AddressBook.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tutorial.AddressBook} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.AddressBook.toObject = function(includeInstance, msg) {
  var f, obj = {
    peopleList: jspb.Message.toObjectList(msg.getPeopleList(),
    proto.tutorial.Person.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tutorial.AddressBook}
 */
proto.tutorial.AddressBook.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tutorial.AddressBook;
  return proto.tutorial.AddressBook.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tutorial.AddressBook} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tutorial.AddressBook}
 */
proto.tutorial.AddressBook.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tutorial.Person;
      reader.readMessage(value,proto.tutorial.Person.deserializeBinaryFromReader);
      msg.addPeople(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tutorial.AddressBook.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tutorial.AddressBook.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tutorial.AddressBook} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.AddressBook.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeopleList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.tutorial.Person.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Person people = 1;
 * @return {!Array<!proto.tutorial.Person>}
 */
proto.tutorial.AddressBook.prototype.getPeopleList = function() {
  return /** @type{!Array<!proto.tutorial.Person>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tutorial.Person, 1));
};


/**
 * @param {!Array<!proto.tutorial.Person>} value
 * @return {!proto.tutorial.AddressBook} returns this
*/
proto.tutorial.AddressBook.prototype.setPeopleList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.tutorial.Person=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tutorial.Person}
 */
proto.tutorial.AddressBook.prototype.addPeople = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tutorial.Person, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tutorial.AddressBook} returns this
 */
proto.tutorial.AddressBook.prototype.clearPeopleList = function() {
  return this.setPeopleList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tutorial.HelloRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tutorial.HelloRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tutorial.HelloRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.HelloRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tutorial.HelloRequest}
 */
proto.tutorial.HelloRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tutorial.HelloRequest;
  return proto.tutorial.HelloRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tutorial.HelloRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tutorial.HelloRequest}
 */
proto.tutorial.HelloRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tutorial.HelloRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tutorial.HelloRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tutorial.HelloRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.HelloRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.tutorial.HelloRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tutorial.HelloRequest} returns this
 */
proto.tutorial.HelloRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tutorial.RepeatHelloRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.tutorial.RepeatHelloRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tutorial.RepeatHelloRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.RepeatHelloRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    count: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tutorial.RepeatHelloRequest}
 */
proto.tutorial.RepeatHelloRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tutorial.RepeatHelloRequest;
  return proto.tutorial.RepeatHelloRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tutorial.RepeatHelloRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tutorial.RepeatHelloRequest}
 */
proto.tutorial.RepeatHelloRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tutorial.RepeatHelloRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tutorial.RepeatHelloRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tutorial.RepeatHelloRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.RepeatHelloRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.tutorial.RepeatHelloRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tutorial.RepeatHelloRequest} returns this
 */
proto.tutorial.RepeatHelloRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 count = 2;
 * @return {number}
 */
proto.tutorial.RepeatHelloRequest.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tutorial.RepeatHelloRequest} returns this
 */
proto.tutorial.RepeatHelloRequest.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tutorial.HelloReply.prototype.toObject = function(opt_includeInstance) {
  return proto.tutorial.HelloReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tutorial.HelloReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.HelloReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tutorial.HelloReply}
 */
proto.tutorial.HelloReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tutorial.HelloReply;
  return proto.tutorial.HelloReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tutorial.HelloReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tutorial.HelloReply}
 */
proto.tutorial.HelloReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tutorial.HelloReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tutorial.HelloReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tutorial.HelloReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tutorial.HelloReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.tutorial.HelloReply.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tutorial.HelloReply} returns this
 */
proto.tutorial.HelloReply.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.tutorial.PhoneType2 = {
  MOBILE: 0,
  HOME: 1,
  WORK: 2
};

goog.object.extend(exports, proto.tutorial);
